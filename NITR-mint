// Numerical Integration using Trapezoidal Rule
// Variables:
// a = lower limit
// b = upper limit
// n = number of intervals
// h = step size
// s = running sum
// i = loop counter
// t = temporary storage
// x = x values array
// y = y values array

// Initialize arrays and variables
:I 20 n!                    // Maximum size
   [ 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 ] x!  // x values
   [ 0 0 0 0 0 0 0 0 0 0
     0 0 0 0 0 0 0 0 0 0 ] y! ;  // y values

// Function f(x) = 1/(1+x^2)
:F " * 1 + 1 / ;          // Stack: x -- 1/(1+x^2)

// Calculate all points
:C b a - n / h!           // Calculate step size
   a x 0 ?!               // x[0] = a
   x 0 ? F y 0 ?!        // y[0] = f(x[0])
   
   n 1- (                 // Loop n-1 times
     x /i ? h + " x /i 1+ ?!  // x[i+1] = x[i] + h
     x /i 1+ ? F y /i 1+ ?!   // y[i+1] = f(x[i+1])
   ) ;

// Calculate integral using trapezoidal rule
:T 0 s!                   // Initialize sum
   n 1- (                 // Loop n-1 times
     y /i 1+ ? s + s!     // Add y[i+1] to sum
   )
   y 0 ? y n 1- ? +      // y[0] + y[n]
   s 2 * + h * 2 / ;     // (h/2)(y[0] + y[n] + 2*sum)

// Print x,y pairs
:P n (
     `x[` /i . `]=` x /i ? . 
     ` y[` /i . `]=` y /i ? . /N
   ) ;

// Main program
:M I                      // Initialize
   `Lower limit:` /N /K a!  // Get lower limit
   `Upper limit:` /N /K b!  // Get upper limit
   `Intervals:` /N /K n!    // Get intervals
   C                      // Calculate points
   P                      // Print values
   T                      // Calculate integral
   `Integral = ` . /N ;   // Print result

// Test program with preset values
:R I                     // Initialize
   0 a! 1 b! 10 n!      // Set test values
   C P T                 // Run calculation
   `Test integral = ` . /N ;
